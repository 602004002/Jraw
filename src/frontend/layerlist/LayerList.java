/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontend.layerlist;

import common.SessionModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.ParallelGroup;
import javax.swing.GroupLayout.SequentialGroup;
import javax.swing.ImageIcon;
import javax.swing.SwingConstants;
import layer.DrawingLayer;

/**
 *
 * @author nickz
 */
public class LayerList extends javax.swing.JPanel {

    private static final ImageIcon PEN_ICON;
    private static final ImageIcon CHECKMARK;

    static {
        PEN_ICON = new ImageIcon(
                LayerList.class.getResource("/frontend/layerlist/pen.png"));
        CHECKMARK = new ImageIcon(
                LayerList.class.getResource("/frontend/layerlist/checkmark.png"));
    }

    private SessionModel session;
    private int[] selectedIndexes;
    private LayerListCell[] cells;

    public LayerList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        cellsPane = new javax.swing.JPanel();

        jLabel3.setText("Selected");

        setMinimumSize(new java.awt.Dimension(184, 0));
        setPreferredSize(new java.awt.Dimension(216, 300));

        jScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        cellsPane.setMinimumSize(new java.awt.Dimension(172, 0));

        javax.swing.GroupLayout cellsPaneLayout = new javax.swing.GroupLayout(cellsPane);
        cellsPane.setLayout(cellsPaneLayout);
        cellsPaneLayout.setHorizontalGroup(
            cellsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 201, Short.MAX_VALUE)
        );
        cellsPaneLayout.setVerticalGroup(
            cellsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 285, Short.MAX_VALUE)
        );

        jScrollPane.setViewportView(cellsPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setSession(SessionModel session) {
        this.session = session;
        this.refresh();
    }

    public void refresh() {
        this.replaceCells();
        if (session != null) {
            setSelectedIndices(session.getSelectedLayerIndexes());
        }
        this.revalidate();
        this.repaint();
    }

    void replaceCells() {
        this.cellsPane.removeAll();
        this.cells = null;
        if (this.session == null) {
            return;
        }
        int size = this.session.layerHierarchy.size();
        this.cells = new LayerListCell[size];
        GroupLayout cellsPaneLayout = new GroupLayout(this.cellsPane);
        
        ParallelGroup horizontal = cellsPaneLayout.createParallelGroup(
                javax.swing.GroupLayout.Alignment.LEADING, true);
        SequentialGroup vSeq = cellsPaneLayout.createSequentialGroup();
        for (int i = size - 1; i >= 0; i--) {
            DrawingLayer layer = this.session.layerHierarchy.get(i);
            LayerListCell llc = new LayerListCell(layer, this);
            horizontal = horizontal.addComponent(llc, GroupLayout.DEFAULT_SIZE,
                    cellsPane.getWidth(), cellsPane.getWidth());
            vSeq = vSeq.addComponent(llc, GroupLayout.DEFAULT_SIZE,
                    GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE);
            llc.visBtn.setSelected(layer.isVisible());
            this.cells[i] = llc;
        }
        cellsPaneLayout.linkSize(SwingConstants.HORIZONTAL,
                this.cellsPane.getComponents());
        cellsPaneLayout.setHorizontalGroup(horizontal);
        cellsPaneLayout.setVerticalGroup(vSeq);
        this.cellsPane.setLayout(cellsPaneLayout);
    }

    int indexOf(LayerListCell llc) {
        int index = -1;
        //find where index in this.cells
        for (int i = 0; i < this.cells.length; i++) {
            if (llc == this.cells[i]) {
                index = i;
            }
        }
        return index;
    }

    private int[] removeFromArrayAndResize(int[] arr, int index) {
        if (arr.length == 0) {
            return new int[0];
        }
        int[] newArr = new int[arr.length - 1];
        System.arraycopy(arr, 0, newArr, 0, index);
        System.arraycopy(arr, index + 1,
                newArr, index,
                newArr.length - index);
        return newArr;
    }

    private int[] resizeAndAppendToArray(int[] arr, int data) {
        if (arr.length == 0) {
            return new int[]{data};
        }
        int[] newArr = new int[arr.length + 1];
        System.arraycopy(arr, 0, newArr, 0, arr.length);
        newArr[arr.length] = data;
        return newArr;
    }

    void appendSelfToSelectedIndexes(LayerListCell llc) {
        int index = indexOf(llc);
        assert (index >= 0) : "Why is was it not found?";
        for (int indexFromSel : this.selectedIndexes) {//scan array if already exists
            if (indexFromSel == index) {
                return;
            }
        }
        this.selectedIndexes = resizeAndAppendToArray(this.selectedIndexes, index);
        this.session.setSelectedLayerIndices(this.selectedIndexes);
    }

    void removeSelfFromSelectedIndexes(LayerListCell llc) {
        int indexInCells = indexOf(llc);
        if (indexInCells < 0) {
            return;
        }
        int indexInSelectedIndexes = -1;
        for (int i = 0; i < this.selectedIndexes.length; i++) {
            if (indexInCells == this.selectedIndexes[i]) {
                indexInSelectedIndexes = i;
            }
        }
        if (indexInSelectedIndexes < 0) {
            return;
        }
        this.selectedIndexes = this.removeFromArrayAndResize(this.selectedIndexes, indexInSelectedIndexes);
        this.session.setSelectedLayerIndices(this.selectedIndexes);
    }

    public void setSelectedIndices(int[] indexes) {
        if (indexes.length == 0) {
            return;
        }
        this.clearSelection();
        for (int i : indexes) {
            cells[i].setSelected(true);
        }
    }

    public void clearSelection() {
        this.selectedIndexes = new int[0];
        for (LayerListCell llc : cells) {
            llc.setSelected(false);
        }
    }

    public int[] getSelectedIndexes() {
        return this.selectedIndexes;
    }

    public int getSelectedIndex() {
        return this.selectedIndexes[0];
    }

    LayerListCell getCell(int i) {
        return this.cells[i];
    }

    void updateIcons() {
        if (this.selectedIndexes.length > 0) {
            for (LayerListCell llc : this.cells) {
                llc.selBtn.setIcon(null);
            }
            for (int i : this.selectedIndexes) {
                this.cells[i].selBtn.setIcon(CHECKMARK);
            }
            this.cells[this.selectedIndexes[0]].selBtn.setIcon(LayerList.PEN_ICON);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cellsPane;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables
}
